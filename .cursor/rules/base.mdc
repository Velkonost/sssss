---
alwaysApply: true
---
Следует реализовывать модульную архитектуру, обеспечивая независимость и масштабируемость каждого компонента (сбор данных, агрегация, стратегии, ИИ-интеграция, аналитика)

Для хранения и обработки API-ключей и других чувствительных данных всегда используйте безопасные механизмы (например, Secure Enclave, TrustZone или серверное шифрованное хранилище), исключая использование LocalStorage. Все ключи должны быть защищены и недоступны в исходном коде или лога

од должен быть написан в соответствии с принципами Clean Architecture и поддерживать тестируемость, читаемость и переиспользуемость. Необходимо документировать архитектурные решения, публичные интерфейсы модулей и структуру данных.

Для работы с Git используйте feature-ветки, делайте осмысленные коммиты, обязательно проходите код-ревью перед слиянием в основную ветку. Все изменения должны быть покрыты тестами, а pull request содержать краткое описание сути изменений

Вся логика сбора данных, расчёта индикаторов и принятия решений должна быть покрыта модульными и интеграционными тестами, с приоритетом на автоматизацию тестирования для критичных бизнес-процессов⁠.

Все действия, связанные с исполнением сделок и принятием решений, должны логироваться и сохраняться для последующего аудита и анализа эффективности системы

Документация должна быть актуальной, подробной и охватывать все аспекты архитектуры, API, бизнес-логики и процессов разработки. Используйте Kanban или Gantt для отслеживания и визуализации задач.

перед началом каждой задачи переходи в новую гит ветку, выполняй задачу в ней. после выполнения задачи пиши ридми об изменениях, push ветку и заводи merge request в main. также пиши тесты на новый/измененный код